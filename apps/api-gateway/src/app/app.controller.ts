import { Controller, Get } from "@nestjs/common";
import { CacheKey, CacheTTL } from "@nestjs/cache-manager";
import { AppService } from "./app.service";
import { CacheService } from "./common/services/cache.service";

@Controller()
export class AppController {
  constructor(
    private readonly appService: AppService,
    private readonly cacheService: CacheService
  ) {}

  @Get()
  getData() {
    return this.appService.getData();
  }

  // Example of automatic caching with custom key and TTL
  @Get("cached-data")
  @CacheKey("app_cached_data")
  @CacheTTL(60000) // 1 minute in milliseconds
  getCachedData() {
    // This will be automatically cached by the global CacheInterceptor
    return {
      timestamp: new Date().toISOString(),
      data: "This response is cached for 1 minute",
      random: Math.random(),
    };
  }

  // Example of manual cache usage
  @Get("manual-cache")
  async getManualCache() {
    return this.cacheService.getOrSet(
      "manual_cache_key",
      async () => {
        // Simulate expensive operation
        await new Promise((resolve) => setTimeout(resolve, 1000));
        return {
          timestamp: new Date().toISOString(),
          data: "This was generated by manual caching",
          expensive: true,
        };
      },
      30000 // 30 seconds TTL
    );
  }

  // Example of cache invalidation
  @Get("clear-cache")
  async clearCache() {
    await this.cacheService.clear();
    return { message: "Cache cleared successfully" };
  }
}
