services:
  # Database services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: kasm
      POSTGRES_PASSWORD: kasm
      POSTGRES_DB: kasm
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kasm"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: kasm
      MONGO_INITDB_ROOT_PASSWORD: kasm
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway - Centralized routing and security
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    ports:
      - "9600:9600"
    environment:
      - NODE_ENV=production
      - PORT=9600
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=1h
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AUTH_SERVICE_URL=http://auth-service:3000
      - ENVIRONMENT_SERVICE_URL=http://environment-service:3001
      - CHALLENGE_SERVICE_URL=http://challenge-service:3002
      - PROGRESS_SERVICE_URL=http://progress-service:3003
      - TERMINAL_SERVICE_URL=http://terminal-service:3004
      - FRONTEND_URL=http://localhost:4200
      - MARKETING_URL=http://localhost:4202
    depends_on:
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
      environment-service:
        condition: service_started
      challenge-service:
        condition: service_started
      progress-service:
        condition: service_started
      terminal-service:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); const req = http.request({hostname: 'localhost', port: 9600, path: '/api/health/ready', timeout: 2000}, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();",
        ]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

  # Backend services
  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://kasm:kasm@postgres:5432/kasm
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "3000"

  environment-service:
    build:
      context: .
      dockerfile: apps/environment-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://kasm:kasm@postgres:5432/kasm
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "3001"

  challenge-service:
    build:
      context: .
      dockerfile: apps/challenge-service/Dockerfile
    environment:
      - MONGODB_URI=mongodb://kasm:kasm@mongodb:27017/kasm?authSource=admin
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - PORT=3002
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "3002"

  progress-service:
    build:
      context: .
      dockerfile: apps/progress-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://kasm:kasm@postgres:5432/kasm
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - PORT=3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "3003"

  terminal-service:
    build:
      context: .
      dockerfile: apps/terminal-service/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
      - PORT=3004
    depends_on:
      redis:
        condition: service_healthy
    expose:
      - "3004"

  # Frontend applications - Now properly configured for production
  app:
    build:
      context: .
      dockerfile: apps/app/Dockerfile
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=production
      - PORT=4200
      - HOST=0.0.0.0
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:4200', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));",
        ]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

  # Marketing site - Now properly configured for production
  marketing:
    build:
      context: .
      dockerfile: apps/marketing/Dockerfile
    ports:
      - "4202:4202"
    environment:
      - NODE_ENV=production
      - PORT=4202
      - HOSTNAME=0.0.0.0
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:4202', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));",
        ]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

volumes:
  postgres-data:
  mongo-data:
  redis-data:
